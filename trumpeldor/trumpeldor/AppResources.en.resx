<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="add_hint" xml:space="preserve">
    <value>add hint</value>
  </data>
  <data name="add_player" xml:space="preserve">
    <value>add player</value>
  </data>
  <data name="age" xml:space="preserve">
    <value>Age</value>
  </data>
  <data name="arrived" xml:space="preserve">
    <value>arrived</value>
  </data>
  <data name="click_ok_to_view_the_next_point_on_the_map" xml:space="preserve">
    <value>click ok to view the next point on the map</value>
  </data>
  <data name="close" xml:space="preserve">
    <value>close</value>
  </data>
  <data name="congrdulation_you_finish_the_track_with" xml:space="preserve">
    <value>congrdulation you finish the track with</value>
  </data>
  <data name="continue_to_longer_track" xml:space="preserve">
    <value>continue to longer track</value>
  </data>
  <data name="Do_you_want_to_continue_last_trip" xml:space="preserve">
    <value>Do you want to continue last trip?</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>error</value>
  </data>
  <data name="feedback" xml:space="preserve">
    <value>feedback</value>
  </data>
  <data name="final_hint" xml:space="preserve">
    <value>final hint</value>
  </data>
  <data name="First_Attraction" xml:space="preserve">
    <value>First Attraction</value>
  </data>
  <data name="group_name" xml:space="preserve">
    <value>Group name:</value>
  </data>
  <data name="Hey" xml:space="preserve">
    <value>Hey</value>
  </data>
  <data name="hints" xml:space="preserve">
    <value>hints</value>
  </data>
  <data name="how_to_play" xml:space="preserve">
    <value>how to play</value>
  </data>
  <data name="information" xml:space="preserve">
    <value>information</value>
  </data>
  <data name="leading_Table" xml:space="preserve">
    <value>leading table</value>
  </data>
  <data name="login_with_facebook" xml:space="preserve">
    <value>Login with Facebook</value>
  </data>
  <data name="long_path" xml:space="preserve">
    <value>Long</value>
  </data>
  <data name="map" xml:space="preserve">
    <value>map</value>
  </data>
  <data name="medium_path" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="mission" xml:space="preserve">
    <value>mission</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="not_arrived" xml:space="preserve">
    <value>not arrived</value>
  </data>
  <data name="ok" xml:space="preserve">
    <value>ok</value>
  </data>
  <data name="path_length" xml:space="preserve">
    <value>Track length:</value>
  </data>
  <data name="play" xml:space="preserve">
    <value>play</value>
  </data>
  <data name="player" xml:space="preserve">
    <value>No. player</value>
  </data>
  <data name="Players_Ages" xml:space="preserve">
    <value>Age</value>
  </data>
  <data name="points" xml:space="preserve">
    <value>points</value>
  </data>
  <data name="question" xml:space="preserve">
    <value>Question</value>
  </data>
  <data name="score" xml:space="preserve">
    <value>score</value>
  </data>
  <data name="share" xml:space="preserve">
    <value>share</value>
  </data>
  <data name="short_path" xml:space="preserve">
    <value>Short</value>
  </data>
  <data name="start_trip" xml:space="preserve">
    <value>start trip</value>
  </data>
  <data name="success" xml:space="preserve">
    <value>success</value>
  </data>
  <data name="watch_again" xml:space="preserve">
    <value>watch again</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="You_have_Reached_Your_Destionation" xml:space="preserve">
    <value>You Have Reached Your Destionation</value>
  </data>
  <data name="Done_Trip_Message" xml:space="preserve">
    <value>Well done, you have done the trip. We would like to get feedback from you. Would you like to feedback us?</value>
  </data>
  <data name="Done_Trip_Title" xml:space="preserve">
    <value>Trip complete!</value>
  </data>
  <data name="Option_1" xml:space="preserve">
    <value>Option 1</value>
  </data>
  <data name="Option_2" xml:space="preserve">
    <value>Option 2</value>
  </data>
  <data name="Share_First_Part_Message" xml:space="preserve">
    <value>Would you like to share in </value>
  </data>
  <data name="Share_Second_Part_Message" xml:space="preserve">
    <value>Or in other application?</value>
  </data>
  <data name="Share_Title" xml:space="preserve">
    <value>Where do you like to share?</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="Answer" xml:space="preserve">
    <value>Answer</value>
  </data>
  <data name="Reply" xml:space="preserve">
    <value>Reply</value>
  </data>
  <data name="Last_Hint_Alert_Message" xml:space="preserve">
    <value>The last hint reveals the location of the attraction. Are you sure you want to use this hint?</value>
  </data>
  <data name="Last_Hint_Alert_Title" xml:space="preserve">
    <value>Last Hint!</value>
  </data>
  <data name="login_as_anonymous" xml:space="preserve">
    <value>Skip</value>
  </data>
  <data name="Out_Of_Valid_Sector_Message" xml:space="preserve">
    <value>You may use basic parts of the application</value>
  </data>
  <data name="Out_Of_Valid_Sector_Title" xml:space="preserve">
    <value>You are out of the bounds of the valid sector</value>
  </data>
  <data name="Too_Much_Mistakes_In_AQ_Message_Part1" xml:space="preserve">
    <value>You have more than</value>
  </data>
  <data name="Too_Much_Mistakes_In_AQ_Message_Part2" xml:space="preserve">
    <value>mistakes. Therefore, you have to wait</value>
  </data>
  <data name="Too_Much_Mistakes_In_AQ_Message_Part3" xml:space="preserve">
    <value>seconds</value>
  </data>
  <data name="Too_Much_Mistakes_In_AQ_title" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="position" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="continue_trip" xml:space="preserve">
    <value>Continue trip</value>
  </data>
  <data name="login_with_google" xml:space="preserve">
    <value>Login with Google account</value>
  </data>
  <data name="sliding_puzzle" xml:space="preserve">
    <value>Sliding puzzle</value>
  </data>
  <data name="Create_your_group" xml:space="preserve">
    <value>Create your group</value>
  </data>
  <data name="error_in_google_login" xml:space="preserve">
    <value>Something went wrong in google sign in</value>
  </data>
  <data name="error_in_group_creation" xml:space="preserve">
    <value>Can't start the trip. Please fill all the details.</value>
  </data>
  <data name="Sign_in" xml:space="preserve">
    <value>Sign in</value>
  <data name="taking_picture" xml:space="preserve">
    <value>Take Picture</value>
  </data>
  <data name="save_and_continue" xml:space="preserve">
    <value>Save and Continue</value>
  </data>
  <data name="take_picture" xml:space="preserve">
    <value>Take Picture</value>
  </data>
</root>